# THEA CVP TIM Schema
[_settings]
DataType = json
Sequential = False

#-------------------------------------------- Metadata -----------------------------------------
[metadata.schemaVersion]
Type = decimal
EqualsValue = 1

[metadata.recordGeneratedBy]
Type = enum
Values = ["rsu"]

[metadata.recordGeneratedAt]
Type = timestamp
LatestTime = NOW
DateFormat = %Y-%m-%d %H:%M:%S.%f [ET]
PYTZTimeZone = EST

[metadata.logFileName]
Type = string

[metadata.kind]
Type = string
Values = ["out"]

[metadata.psid]
Type = decimal

[metadata.RSUID]
Type = string

[metadata.externalId]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.externalId"}}]}

[metadata.dataType]
Type = enum
Values = ["tim"]

#-------------------------------------------- Payload -----------------------------------------

#------------ Traveler Information ---------------

[payload.data.TravelerInformation.msgCnt]
Type = decimal
LowerLimit = 0
UpperLimit = 127

[payload.data.TravelerInformation.timeStamp]
Type = decimal
LowerLimit = 0
UpperLimit = 527040
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.timeStamp"}}]}

[payload.data.TravelerInformation.packetID]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.packetID"}}]}

[payload.data.TravelerInformation.urlB]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.urlB"}}]}

#------------ Traveler DataFrame (Single) ---------------

#----- Part I, Frame Header ------
[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.sspTimRights]
Type = decimal
LowerLimit = 0
UpperLimit = 31

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.frameType]
Type = choice
Choices = ["unknown", "advisory", "roadSignage", "commercialStorage"]

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId]
Type = choice
Choices = ["furtherInfoID", "roadSignID"]

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.furtherInfoId]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.furtherInfoId"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position.lat]
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position.long]
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position.elevation]
Type = decimal
LowerLimit = -4096
UpperLimit = 61439
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position.regional]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.viewAngle]
Type = bitstring
BitStringLength = 16

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.mutcdCode]
Type = choice
Choices = ["none", "regulatory", "warning", "maintenance", "motoristService", "guide", "rec"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.mutcdCode"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.msgCrc]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.msgCrc"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.startYear]
Type = decimal
LowerLimit = 0
UpperLimit = 4095
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.startYear"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.startTime]
Type = decimal
LowerLimit = 0
UpperLimit = 527040

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.duratonTime]
Type = decimal
LowerLimit = 0
UpperLimit = 320000

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.priority]
Type = decimal
LowerLimit = 0
UpperLimit = 7

#----- Part II, Applicable Regions of Use ------

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.sspLocationRights]
Type = decimal
LowerLimit = 0
UpperLimit = 31

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.name]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.name"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.id.region]
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.id.region"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.id.id]
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.id.id"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.lat]
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.long]
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.elevation]
Type = decimal
LowerLimit = -4096
UpperLimit = 61439
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.elevation"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.laneWidth]
Type = decimal
LowerLimit = 0
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.laneWidth"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.directionality]
Type = choice
Choices = ["unavailable", "forward", "reverse", "both"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.directionality"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.closedPath]
Type = choice
Choices = ["true", "false"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.closedPath"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.direction]
Type = bitstring
BitStringLength = 16
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.direction"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description]
Type = choice
Choices = ["path", "geometry", "oldRegion"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.scale]
Type = decimal
LowerLimit = 0
UpperLimit = 15
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.scale"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset]
Type = choice
Choices = ["xy", "ll"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset"}}]}




[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.sspMsgRights1]
Type = String
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.sspMsgRights1"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.sspMsgRights2]
Type = String
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.sspMsgRights2"}}]}

[payload.data.TravelerInformation.dataFrames.TravelerDataFrame.content.advisory.SEQUENCE.item.itis]
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.TravelerInformation.dataFrames.TravelerDataFrame.content.advisory.SEQUENCE.item.itis"}}]}
